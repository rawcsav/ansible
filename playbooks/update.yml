---
- name: Update and Upgrade all packages
  hosts: all
  become: yes
  vars:
    reboot_required: false
    perform_reboot: false  # Set to true to allow automatic reboots
    discord_webhook_url: "{{ lookup('env', 'DISCORD_WEBHOOK_URL') }}"
    log_file: "/var/log/ansible_upgrade.log"
    excluded_packages:
      - docker
      - docker-ce
      - wireguard
      - pihole
      - unbound

  tasks:
    - name: Check if system is Debian-based
      fail:
        msg: "This playbook only supports Debian-based systems"
      when: ansible_os_family != "Debian"
      tags:
        - always

    - name: Ensure log directory exists
      file:
        path: "{{ log_file | dirname }}"
        state: directory
        mode: '0755'
      tags:
        - always

    - name: Check available disk space
      shell: df -h / | awk 'NR==2 {print $4}'
      register: available_space
      changed_when: false
      tags:
        - pre_check

    - name: Fail if not enough disk space
      fail:
        msg: "Not enough disk space. Only {{ available_space.stdout }} available."
      when: available_space.stdout | replace('G', '') | float < 1.0
      tags:
        - pre_check

    - name: Update apt package list
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update_result
      tags:
        - update

    - name: Upgrade all packages except excluded ones
      apt:
        name: "*"
        state: latest
        exclude: "{{ excluded_packages | join(',') }}"
      register: apt_upgrade_result
      failed_when:
        - apt_upgrade_result.failed
        - "'Failed to fetch' in apt_upgrade_result.msg"
      tags:
        - upgrade

    - name: Check if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      tags:
        - reboot_check

    - name: Set reboot_required flag
      set_fact:
        reboot_required: "{{ reboot_required_file.stat.exists }}"
      tags:
        - reboot_check

    - name: Remove unnecessary packages
      apt:
        autoremove: yes
      register: autoremove_result
      tags:
        - cleanup

    - name: Clean apt cache
      apt:
        autoclean: yes
      register: autoclean_result
      tags:
        - cleanup

    - name: Log upgrade summary
      lineinfile:
        path: "{{ log_file }}"
        line: "{{ ansible_date_time.iso8601 }} - Host: {{ ansible_hostname }} - Packages updated: {{ apt_update_result.changed }} - Packages upgraded: {{ apt_upgrade_result.changed }} - Reboot required: {{ reboot_required }} - Autoremove: {{ autoremove_result.changed }} - Autoclean: {{ autoclean_result.changed }}"
        create: yes
      tags:
        - always

    - name: Print upgrade summary
      debug:
        msg:
          - "Packages updated: {{ apt_update_result.changed }}"
          - "Packages upgraded: {{ apt_upgrade_result.changed }}"
          - "Reboot required: {{ reboot_required }}"
          - "Packages autoremoved: {{ autoremove_result.changed }}"
          - "Apt cache cleaned: {{ autoclean_result.changed }}"
      tags:
        - always

    - name: Reboot the system if required and allowed
      reboot:
        msg: "Rebooting due to package upgrades"
        reboot_timeout: 300
      when: reboot_required and perform_reboot
      tags:
        - reboot

    - name: Send Discord notification
      block:
        - uri:
            url: "{{ discord_webhook_url }}"
            method: POST
            body_format: json
            body:
              content: |
                Host: {{ ansible_hostname }}
                OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
                Updates: {{ 'Yes' if apt_update_result.changed else 'No' }}
                Upgrades: {{ 'Yes' if apt_upgrade_result.changed else 'No' }}
                Reboot needed: {{ 'Yes' if reboot_required else 'No' }}
                Reboot performed: {{ 'Yes' if (reboot_required and perform_reboot) else 'No' }}
                Packages autoremoved: {{ 'Yes' if autoremove_result.changed else 'No' }}
                Apt cache cleaned: {{ 'Yes' if autoclean_result.changed else 'No' }}
                {% if apt_upgrade_result.stdout_lines | length > 0 %}
                Upgraded packages:
                {{ apt_upgrade_result.stdout_lines | select('match', '^Upgrading.*') | list | join('\n') }}
                {% endif %}
                Excluded packages: {{ excluded_packages | join(', ') }}
            status_code: [ 200, 204 ]
          register: discord_notification
          until: discord_notification is not failed
          retries: 3
          delay: 5
      rescue:
        - name: Log failure for upgrade notification
          lineinfile:
            path: "{{ log_file }}"
            line: "{{ ansible_date_time.iso8601 }} - Failed to send Discord notification about upgrades for host {{ ansible_hostname }}"
            create: yes
      always:
        - name: Ensure playbook continues after upgrade notification
          debug:
            msg: "Continuing with next tasks..."
      when: discord_webhook_url is defined
      tags:
        - notify

  handlers:
    - name: Restart services
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - ssh
      when: apt_upgrade_result.changed