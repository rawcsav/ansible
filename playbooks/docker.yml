---
- name: Update and Restart Docker Compose Projects
  hosts: rawcsav
  become: yes
  vars_files:
    - ../group_vars/servers/vault.yml
  vars:
    github_base_url: "https://github.com/rawcsav"
    docker_compose_projects:
      - path: "/home/rawcsav/AIUtilsFlask"
        repo: "{{ github_base_url }}/NewUtility"
      - path: "/home/rawcsav/SpotifyFlask"
        repo: "{{ github_base_url }}/RawcOn"
      - path: "/home/rawcsav/DockSec"
        repo: "{{ github_base_url }}/DockSec"
    email_to: "{{ vault_smtp_username }}"
    email_from: "{{ vault_smtp_username }}"
    email_subject: "Docker Compose Update Report from {{ ansible_facts['hostname'] }}"
    force_update: true  # Set to true to force updates for testing
  tasks:
    - name: Pull latest updates from GitHub
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ item.path }}"
        force: yes
        update: yes
      register: git_status
      loop: "{{ docker_compose_projects }}"

    - name: Manage Docker Compose projects
      block:
        - name: Capture 'before' state for projects
          ansible.builtin.command:
            cmd: docker compose ps
            chdir: "{{ item.item.path }}"
          register: before_state
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"

        - name: Stop Docker Compose project if updated or forced
          ansible.builtin.command:
            cmd: docker compose down
            chdir: "{{ item.item.path }}"
          when: item.changed or (item.item.path == '/home/rawcsav/SpotifyFlask' and force_update | bool)
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"
          register: down_result

        - name: Start Docker Compose project if updated or forced
          ansible.builtin.command:
            cmd: docker compose up -d
            chdir: "{{ item.item.path }}"
          when: item.changed or (item.item.path == '/home/rawcsav/SpotifyFlask' and force_update | bool)
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"
          register: up_result

        - name: Capture 'after' state for projects
          ansible.builtin.command:
            cmd: docker compose ps
            chdir: "{{ item.item.path }}"
          register: after_state
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"

        - name: Capture recent logs for projects
          ansible.builtin.command:
            cmd: docker compose logs --tail=20
            chdir: "{{ item.item.path }}"
          register: recent_logs
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"

      rescue:
        - name: Capture error details
          ansible.builtin.set_fact:
            error_details: "{{ ansible_failed_result }}"

      always:
        - name: Prepare status report
          ansible.builtin.set_fact:
            status_report: |
              Docker Compose Update Report for {{ ansible_hostname }}

              {% for result in git_status.results %}
              Project: {{ result.item.path }}
              Repository: {{ result.item.repo }}
              Updated: {{ 'Yes' if result.changed or (result.item.path == '/home/rawcsav/SpotifyFlask' and force_update) else 'No' }}

              Before Update:
              {{ before_state.results[loop.index0].stdout }}

              After Update:
              {{ after_state.results[loop.index0].stdout }}

              Recent Logs:
              {{ recent_logs.results[loop.index0].stdout }}

              {% endfor %}

              {% if error_details is defined %}
              Error Details:
              {{ error_details | to_yaml }}
              {% endif %}

        - name: Send email report
          ansible.builtin.mail:
            host: "{{ vault_smtp_server }}"
            port: "{{ vault_smtp_port }}"
            username: "{{ vault_smtp_username }}"
            password: "{{ vault_smtp_password }}"
            to: "{{ email_to }}"
            from: "{{ email_from }}"
            subject: "{{ email_subject }}"
            body: "{{ status_report }}"
