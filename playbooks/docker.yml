---
- name: Update and Restart Docker Compose Projects
  hosts: rawcsav
  become: yes
  vars_files:
    - ../group_vars/servers/vault.yml
  vars:
    github_base_url: "https://github.com/rawcsav"
    docker_compose_projects:
      - path: "/home/rawcsav/AIUtilsFlask"
        repo: "{{ github_base_url }}/NewUtility"
      - path: "/home/rawcsav/SpotifyFlask"
        repo: "{{ github_base_url }}/RawcOn"
      - path: "/home/rawcsav/DockSec"
        repo: "{{ github_base_url }}/DockSec"
    email_to: "{{ vault_smtp_username }}"
    email_from: "{{ vault_smtp_username }}"
    email_subject: "Docker Compose Update Report from {{ ansible_facts['hostname'] }}"
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:

    - name: Get current Docker info
      community.docker.docker_host_info:
      register: docker_info

    - name: Get list of running containers before update
      community.docker.docker_container_info:
        name: all
      register: container_info_before

    - name: Pull updates and manage Docker Compose projects
      block:
        - name: Pull latest updates from GitHub
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "{{ item.path }}"
            force: yes
          register: git_status
          loop: "{{ docker_compose_projects }}"

        - name: Restart Docker Compose project if updated
          community.docker.docker_compose_v2:
            project_src: "{{ item.item.path }}"
            state: present
            build: "{{ 'always' if item.changed else 'never' }}"
            pull: always
            recreate: always
          when: item.changed
          loop: "{{ git_status.results }}"
          loop_control:
            label: "{{ item.item.path }}"
          register: docker_restart_result

        - name: Remove old Docker images and volumes
          community.docker.docker_prune:
            images: yes
            volumes: yes
            images_filters:
              dangling: true
          register: prune_result

      rescue:
        - name: Capture error details
          ansible.builtin.set_fact:
            error_details: "{{ ansible_failed_result }}"

      always:
        - name: Get list of running containers after update
          community.docker.docker_container_info:
            name: all
          register: container_info_after
        - name: Prepare status report
          ansible.builtin.set_fact:
            status_report: |
              Docker Compose Update Report for {{ ansible_facts['hostname'] }}

              System Information:
              - OS: {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}

              - Kernel: {{ ansible_facts['kernel'] }}
              - Total Memory: {{ ansible_facts['memtotal_mb'] }} MB
              - Available Memory: {{ ansible_facts['memfree_mb'] }} MB
              - CPU Count: {{ ansible_facts['processor_count'] }}

              Docker Compose Projects:
              {% for result in git_status.results %}
              - Project: {{ result.item.path }}
                - Repository: {{ result.item.repo }}
                - Updated: {{ 'Yes' if result.changed else 'No' }}
                {% if docker_restart_result.results is defined %}
                {% set restart_result = docker_restart_result.results | selectattr('item.item.path', 'equalto', result.item.path) | first %}
                - Restarted: {{ 'Yes' if restart_result.changed | default(false) else 'No' }}
                {% endif %}
              {% endfor %}

              Docker Containers:
              - Before Update:
              {% if container_info_before.containers is defined %}
              {% for container in container_info_before.containers.values() %}
                - {{ container.name }}: {{ container.state.status }}
              {% endfor %}
              {% else %}
                No containers found.
              {% endif %}
              - After Update:
              {% if container_info_after.containers is defined %}
              {% for container in container_info_after.containers.values() %}
                - {{ container.name }}: {{ container.state.status }}
              {% endfor %}
              {% else %}
                No containers found.
              {% endif %}

              Docker Prune Results:
              - Images Removed: {{ prune_result.images_deleted | default(0) }}
              - Space Reclaimed: {{ prune_result.space_reclaimed | default(0) | human_readable }}

              {% if error_details is defined %}
              Error Details:
              {{ error_details | to_yaml }}
              {% endif %}

        - name: Send email report
          ansible.builtin.mail:
            host: "{{ vault_smtp_server }}"
            port: "{{ vault_smtp_port }}"
            username: "{{ vault_smtp_username }}"
            password: "{{ vault_smtp_password }}"
            to: "{{ email_to }}"
            from: "{{ email_from }}"
            subject: "{{ email_subject }}"
            body: "{{ status_report }}"
