- name: Check services status on all servers and send email report
  hosts: servers
  become: yes
  vars_files:
    - ../group_vars/servers/vault.yml
  vars:
    email_to: "{{ vault_smtp_username }}"
    email_from: "{{ vault_smtp_username }}"
    email_subject: "Service Status Update from {{ ansible_facts['hostname'] }}"
  tasks:
    - name: Check WireGuard status and show details
      shell: sudo wg show
      register: wg_show
      ignore_errors: true
      changed_when: false

    - name: Tail WireGuard logs
      shell: tail -n 10 /var/log/syslog | grep wg
      register: wg_logs
      ignore_errors: true
      changed_when: false

    - name: Tail Fail2ban logs
      shell: tail -n 10 /var/log/fail2ban.log
      register: fail2ban_logs
      ignore_errors: true
      changed_when: false

    - name: Get CPU usage
      shell: top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
      register: cpu_usage
      ignore_errors: true
      changed_when: false

    - name: Get network statistics
      shell: ip -s link
      register: network_stats
      ignore_errors: true
      changed_when: false

    - name: Check for failed services
      shell: systemctl list-units --state=failed
      register: failed_services
      ignore_errors: true
      changed_when: false

    - name: Check for unauthorized SSH attempts
      shell: grep "Failed password" /var/log/auth.log | tail -n 10
      register: ssh_attempts
      ignore_errors: true
      changed_when: false

    - name: Gather system facts
      ansible.builtin.setup:

    - name: Create email body
      set_fact:
        email_body: |
          Service status update from **{{ ansible_facts['hostname'] }}** ({{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}):
          
          - **WireGuard Show**:
          {{ wg_show.stdout | default('N/A') }}

          - **WireGuard Logs**:
          {{ wg_logs.stdout | default('N/A') }}

          - **Fail2ban Logs**:
          {{ fail2ban_logs.stdout | default('N/A') }}

          - **CPU Usage**: {{ cpu_usage.stdout | default('N/A') }}
          
          - **Memory**: Total {{ ansible_facts['memtotal_mb'] }} MB, Free {{ ansible_facts['memfree_mb'] }} MB
          
          - **Disk**: {{ ansible_facts['mounts'][0]['mount'] }} {{ ansible_facts['mounts'][0]['size_total'] | human_readable | default('N/A') }} total, {{ ansible_facts['mounts'][0]['size_available'] | human_readable | default('N/A') }} available

          - **Network Statistics**:
          {{ network_stats.stdout | default('N/A') }}

          - **Failed Services**:
          {% if failed_services.stdout_lines | length > 0 %}
          {{ failed_services.stdout }}
          {% else %}
          No failed services
          {% endif %}

          - **Recent Unauthorized SSH Attempts**:
          {{ ssh_attempts.stdout | default('N/A') }}

          - **Uptime**: {{ ansible_facts['uptime_seconds'] | int | seconds_to_time }}

    - name: Send status report via email
      ansible.builtin.mail:
        host: "{{ vault_smtp_server }}"
        port: "{{ vault_smtp_port }}"
        username: "{{ vault_smtp_username }}"
        password: "{{ vault_smtp_password }}"
        to: "{{ email_to }}"
        from: "{{ email_from }}"
        subject: "{{ email_subject }}"
        body: "{{ email_body }}"


- name: Additional checks for rawcsec server and send email report
  hosts: rawcsec
  become: yes
  vars_files:
    - ../group_vars/servers/vault.yml
  vars:
    email_to: "{{ vault_smtp_username }}"
    email_from: "{{ vault_smtp_username }}"
    email_subject: "Service Status Update from {{ ansible_facts['hostname'] }}"
  tasks:
    - name: Check status of Pi-hole
      shell: sudo systemctl status pihole-FTL
      register: pihole_status
      ignore_errors: true
      changed_when: false

    - name: Tail Pi-hole logs
      shell: tail -n 10 /var/log/pihole.log
      register: pihole_logs
      ignore_errors: true
      changed_when: false

    - name: Check status of Unbound
      shell: sudo systemctl status unbound
      register: unbound_status
      ignore_errors: true
      changed_when: false

    - name: Tail Unbound logs
      shell: tail -n 10 /var/log/unbound/unbound.log
      register: unbound_logs
      ignore_errors: true
      changed_when: false

    - name: Get Pi-hole statistics
      shell: pihole -c -j
      register: pihole_stats
      ignore_errors: true
      changed_when: false

    - name: Get Unbound statistics
      shell: unbound-control stats_noreset | head -n 10
      register: unbound_stats
      ignore_errors: true
      changed_when: false

    - name: Gather system facts
      ansible.builtin.setup:

    - name: Create email body
      set_fact:
        email_body: |
          Additional service status update from **{{ ansible_facts['hostname'] }}** ({{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}):
          
          - **Pi-hole Status**:
          {{ pihole_status.stdout | default('N/A') }}

          - **Pi-hole Logs**:
          {{ pihole_logs.stdout | default('N/A') }}

          - **Pi-hole Statistics**:
          {{ pihole_stats.stdout | default('N/A') | from_json | to_nice_yaml }}

          - **Unbound Status**:
          {{ unbound_status.stdout | default('N/A') }}

          - **Unbound Logs**:
          {{ unbound_logs.stdout | default('N/A') }}

          - **Unbound Statistics**:
          {{ unbound_stats.stdout | default('N/A') }}

          - **Uptime**: {{ ansible_facts['uptime_seconds'] | int | seconds_to_time }}
          
          - **Memory**: Total {{ ansible_facts['memtotal_mb'] }} MB, Free {{ ansible_facts['memfree_mb'] }} MB
          
          - **Disk**: {{ ansible_facts['mounts'][0]['mount'] }} {{ ansible_facts['mounts'][0]['size_total'] | human_readable | default('N/A') }} total, {{ ansible_facts['mounts'][0]['size_available'] | human_readable | default('N/A') }} available

    - name: Send status report via email
      ansible.builtin.mail:
        host: "{{ vault_smtp_server }}"
        port: "{{ vault_smtp_port }}"
        username: "{{ vault_smtp_username }}"
        password: "{{ vault_smtp_password }}"
        to: "{{ email_to }}"
        from: "{{ email_from }}"
        subject: "{{ email_subject }}"
        body: "{{ email_body }}"